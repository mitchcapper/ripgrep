name: ci
on:
  pull_request:
  push:
    branches-ignore:
      - trash
jobs:
  test:
    name: test
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS:
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
      # Additional build flags for cargo
      CARGO_ADDL_FLAGS:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        type: ["release", "debug"]
        build:
        - win-msvc
  
        include:
        - build: win-msvc
          os: windows-2022
          rust: nightly
          target: x86_64-pc-windows-msvc

  
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install packages (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        ci/ubuntu-install-packages

    - name: Install packages (macOS)
      if: matrix.os == 'macos-12'
      run: |
        ci/macos-install-packages

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}


    - name: Set Cargo Addl Build Flags
      if: matrix.type == 'release'
      run: |
        echo "CARGO_ADDL_FLAGS=--release" >> $GITHUB_ENV
        echo "CARGO_ADDL_FLAGS=--release" >> $env:GITHUB_ENV
        

    - name: Use Cross
      if: matrix.target != ''
      run: |
        cargo install cross
        echo "CARGO=cross" >> $GITHUB_ENV
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

    - name: Show command used for Cargo
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"

    - name: Build ripgrep and all crates
      run: ${{ env.CARGO }} build ${{ env.CARGO_ADDL_FLAGS }} --verbose --workspace ${{ env.TARGET_FLAGS }}

    - name: Build ripgrep with PCRE2
      run: ${{ env.CARGO }} build ${{ env.CARGO_ADDL_FLAGS }} --verbose --workspace --features pcre2 ${{ env.TARGET_FLAGS }}

    # This is useful for debugging problems when the expected build artifacts
    # (like shell completions and man pages) aren't generated.
    - name: Show build.rs stderr
      shell: bash
      run: |
        set +x
        stderr="$(find "${{ env.TARGET_DIR }}/${{ matrix.type }}" -name stderr -print0 | xargs -0 ls -t | head -n1)"
        if [ -s "$stderr" ]; then
          echo "===== $stderr ===== "
          cat "$stderr"
          echo "====="
        fi
        set -x

    - name: Run tests with PCRE2 (sans cross)
      if: matrix.target == ''
      run: ${{ env.CARGO }} test --verbose --workspace --features pcre2 ${{ env.TARGET_FLAGS }}

    - name: Run tests without PCRE2 (with cross)
      # These tests should actually work, but they almost double the runtime.
      # Every integration test spins up qemu to run 'rg', and when PCRE2 is
      # enabled, every integration test is run twice: one with the default
      # regex engine and once with PCRE2.
      if: matrix.target != ''
      run: ${{ env.CARGO }} test --verbose --workspace ${{ env.TARGET_FLAGS }}

    - name: Test for existence of build artifacts (Windows)
      if: matrix.os == 'windows-2022'
      shell: bash
      run: |
        outdir="$(ci/cargo-out-dir "${{ env.TARGET_DIR }}")"
        ls "$outdir/_rg.ps1" && file "$outdir/_rg.ps1"

    - name: Test for existence of build artifacts (Unix)
      if: matrix.os != 'windows-2022'
      shell: bash
      run: |
        outdir="$(ci/cargo-out-dir "${{ env.TARGET_DIR }}")"
        # TODO: Check for the man page generation here. For whatever reason,
        # it seems to be intermittently failing in CI. No idea why.
        # for f in rg.bash rg.fish rg.1; do
        for f in rg.bash rg.fish; do
          # We could use file -E here, but it isn't supported on macOS.
          ls "$outdir/$f" && file "$outdir/$f"
        done

    - name: Test zsh shell completions (Unix, sans cross)
      # We could test this when using Cross, but we'd have to execute the
      # 'rg' binary (done in test-complete) with qemu, which is a pain and
      # doesn't really gain us much. If shell completion works in one place,
      # it probably works everywhere.
      if: matrix.target == '' && matrix.os != 'windows-2022'
      shell: bash
      run: ci/test-complete

    - name: Build archive
      shell: bash
      run: |
        outdir="$(ci/cargo-out-dir "${{ env.TARGET_DIR }}")"
        staging="ripgrep-${{ matrix.target }}"
        mkdir -p "$staging"/{complete,doc}

        cp {README.md,COPYING,UNLICENSE,LICENSE-MIT} "$staging/"
        cp {CHANGELOG.md,FAQ.md,GUIDE.md} "$staging/doc/"
        cp "$outdir"/{rg.bash,rg.fish,_rg.ps1} "$staging/complete/"
        cp complete/_rg "$staging/complete/"

        if [ "${{ matrix.os }}" = "windows-2022" ]; then
          cp "target/${{ matrix.target }}/${{ matrix.type }}/rg.exe" "$staging/"
          7z a "$staging.zip" "$staging"
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
        else
          # The man page is only generated on Unix systems. ¯\_(ツ)_/¯
          cp "$outdir"/rg.1 "$staging/doc/"
          cp "target/${{ matrix.target }}/${{ matrix.type }}/rg" "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        path: ${{ env.ASSET }}
        name: ${{ env.ASSET }}


  rustfmt:
    name: rustfmt
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        components: rustfmt
    - name: Check formatting
      run: cargo fmt --all --check

  docs:
    name: Docs
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Check documentation
        env:
          RUSTDOCFLAGS: -D warnings
        run: cargo doc --no-deps --document-private-items --workspace
